"" Personal vimrc
"" Author : 
"" Kim SangHoon <lucidash@gmail.com>
"" =========================================================
"" Author : 
"" Haze Lee <hazelee@realignist.me>
"" =========================================================

set nocompatible

"" {{{{{{{{{{{
"" Arrow No map
map <leader>src :source ~/.vimrc<CR>
map <Up> <silent>
map <Down> <silent>
map <Left> <silent>
map <Right> <silent>


nnoremap j gj
nnoremap k gk

" Easier to indent with < and > keys.
vnoremap < <gv
vnoremap > >gv


set mouse+=a
if &term =~ '^screen'
  "tmux knows the extended mouse mode
  set ttymouse=xterm2
endif

" EDITOR {{{ -----------------------------------------------
set nu ru sc wrap ls=4 lz                " -- appearance
set et bs=2 ts=4 sw=4 sts=4            " -- tabstop
set noai nosi hls is ic cf ws scs magic  " -- search
set sol sel=inclusive mps+=<:>           " -- moving around
set ut=10 uc=200                         " -- swap control
set report=0 lpl wmnu                    " -- misc.
set mouse=a

" encoding and file format
set fenc=utf-8 ff=unix ffs=unix,dos,mac
set fencs=utf-8,cp949,cp932,euc-jp,shift-jis,big5,latin2,ucs2-le

" list mode
"set nolist lcs=extends:>,precedes:<
"if &tenc ==? "utf-8"
"set lcs+=tab:»\ ,trail:·
"else
"set lcs+=tab:\|\ 
"endif
" }}} ------------------------------------------------------
"olorscheme desert256
"colorscheme xoria256
colorscheme nord

nnoremap <CR> :noh<CR>
"" }}}}}}}}}}

""
set rtp+=~/.vim/bundle/vim-pathogen
execute pathogen#infect()

""
set wildignore+=*/tmp/*,*.so,*.swp,*.zip

scripte utf-8
"set nocp all&

" TERMINAL {{{ ---------------------------------------------
if &term =~ "xterm"
  set t_Co=256
  if has("terminfo")
    let &t_Sf = "\<Esc>[3%p1%dm"
    let &t_Sb = "\<Esc>[4%p1%dm"
  else
    let &t_Sf = "\<Esc>[3%dm"
    let &t_Sb = "\<Esc>[4%dm"
  endif
endif


" terminal encoding (always use utf-8 if possible)
if !has("win32") || has("gui_running")
  set enc=utf-8 tenc=utf-8
  if has("win32")
    set tenc=cp949
    let $LANG = substitute($LANG, '\(\.[^.]\+\)\?$', '.utf-8', '')
  endif
endif

if &enc ==? "euc-kr"
  set enc=cp949
endif
" }}} ------------------------------------------------------
"

" TEMPORARY/BACKUP DIRECTORY {{{ ---------------------------
set swf nobk bex=.bak
if exists("$HOME")
  " makes various files written into ~/.vim/ or ~/_vim/
  let s:home_dir = substitute($HOME, '[/\\]$', '', '')
  if has("win32")
    let s:home_dir = s:home_dir . '/_vim'
  else
    let s:home_dir = s:home_dir . '/.vim'
  endif
  if isdirectory(s:home_dir)
    let &dir = s:home_dir . '/tmp,' . &dir
    let &bdir = s:home_dir . '/backup,' . &bdir
    let &vi = &vi . ',n' . s:home_dir . '/viminfo'
  endif
endif
" }}} ------------------------------------------------------


" immediate buffer configuration
"map <silent> <Leader>n :let &nu = 1 - &nu<CR>
"map <silent> <Leader>l :let &list = 1 - &list<CR>
"map <silent> <Leader>p :let &paste = 1 - &paste<CR>
"map <silent> <Leader>w :let &wrap = 1 - &wrap<CR>
"nmap <silent> <Leader>4 :set ts=4 sw=4<CR>
"nmap <silent> <Leader>8 :set ts=8 sw=8<CR>

" editing and applying .vimrc
if has("win32")
  nmap <silent> <Leader>R :so $HOME/_vimrc<CR>
  nmap <silent> <Leader>rc :ek$HOME/_vimrc<CR>
else
  nmap <silent> <Leader>R :so $HOME/.vimrc<CR>
  nmap <silent> <Leader>rc :e $HOME/.vimrc<CR>
endif

" inserting matching quotes
fu! s:InputQuotes()
  if mode() == "R"
    exe "normal \<Esc>" | return ""   " -- beep
  elseif match(getline("."), '\%u2018\%'.col('.').'c\%u2019') < 0
    return "\u2018\u2019\<Insert>\<BS>\<Insert>"
  else
    return "\<Del>\<BS>\u201c\u201d\<Insert>\<BS>\<Insert>"
  endif
endf
imap <silent> <C-'> <C-R>=<SID>InputQuotes()<CR>

" misc. mapping
nmap <silent> <Leader>cd :cd %:p:h<CR>
nmap <silent> <Leader><Space> :noh<CR>
" }}} ------------------------------------------------------


" SYNTAX {{{ -----------------------------------------------
syn enable
syn sync maxlines=1000
filet plugin indent on
let php_sync_method = 0
let html_wrong_comments = 1
" }}} ------------------------------------------------------

" AUTOCMD {{{ ----------------------------------------------
if has("autocmd")
  aug vimrc
    au!

    " filetype-specific configurations
    au FileType python setl ts=4 sw=4 sts=4 noet
    au FileType html setl ts=4 sw=4 sts=4 et
    au FileType php setl ts=4 sw=4 sts=4 et
    au FileType cpp setl ts=4 sw=4 sts=4 noet
    au FileType c setl ts=4 sw=4 sts=4 noet
    au Filetype text setl tw=80
    au FileType javascript,jsp setl cin
    au FileType ruby setl ts=4 sw=4 sts=0 tw=0 et
    au BufNewFile,BufRead *.phps,*.php3s setf php

    """""""""""""" frientrip convention
    au FileType html set sw=2 et
    au FileType javascript set sw=2 et
    au FileType coffee set sw=2 et
    """""""""""""" frientrip convention

    " restore cursor position when the file has been read
    au BufReadPost *
          \ if line("'\"") > 0 && line("'\"") <= line("$") |
          \   exe "norm g`\"" |
          \ endif

    " fix window position for mac os x
    if has("gui_running") && has("macunix")
      au GUIEnter *
            \ if getwinposx() < 50 |
            \   exe ':winp 50 ' . (getwinposy() + 22) |
            \ endif
    endif

    " fix window size if window size has been changed
    if has("gui_running")
      fu! s:ResizeWindows()
        let l:nwins = winnr("$") | let l:num = 1
        let l:curtop = 0 | let l:curleft = 0
        let l:lines = &lines - &cmdheight
        let l:prevlines = s:prevlines - &cmdheight
        let l:cmd = ""
        while l:num < l:nwins
          if l:curleft == 0
            let l:adjtop = l:curtop * l:lines / l:prevlines
            let l:curtop = l:curtop + winheight(l:num) + 1
            if l:curtop < l:lines
              let l:adjheight = l:curtop * l:lines / l:prevlines - l:adjtop - 1
              let l:cmd = l:cmd . l:num . "resize " . l:adjheight . "|"
            endif
          endif
          let l:adjleft = l:curleft * &columns / s:prevcolumns
          let l:curleft = l:curleft + winwidth(l:num) + 1
          if l:curleft < &columns
            let l:adjwidth = l:curleft * &columns / s:prevcolumns - l:adjleft - 1
            let l:cmd = l:cmd . "vert " . l:num . "resize " . l:adjwidth . "|"
          else
            let l:curleft = 0
          endif
          let l:num = l:num + 1
        endw
        exe l:cmd
      endf
      fu! s:ResizeAllWindows()
        if v:version >= 700
          let l:tabnum = tabpagenr()
          tabdo call s:ResizeWindows()
          exe "norm " . l:tabnum . "gt"
        else
          call s:ResizeWindows()
        endif
        let s:prevlines = &lines | let s:prevcolumns = &columns
      endf
      au GUIEnter * let s:prevlines = &lines | let s:prevcolumns = &columns
      au VimResized * call s:ResizeAllWindows()
    endif

  aug END
endif
" }}} ------------------------------------------------------



" ----- Key mappings 
"
"
"the leader key
let mapleader=","
" comma is the <Leader> key now.

map <C-_> <leader>ci

" Switch between window splits using big J or K and expand the split to its 
" " full size. 
" " Move vertically in the window through the horizontal splits... 
nnoremap <C-J> <C-w>j
nnoremap <C-K> <C-w>k
" " Move horizontally in the window through the vertical splits... 
nnoremap <C-H> <C-w>h
nnoremap <C-L> <C-w>l

" Tab navigations
nnoremap <C-n>     :tabnew<CR>
nnoremap <leader>l  :tabnext<CR>
nnoremap <leader>h  :tabprev<CR>
map <leader>1 1gt
map <leader>2 2gt
map <leader>3 3gt
map <leader>4 4gt
map <leader>5 5gt
map <leader>6 6gt
map <leader>7 7gt
map <leader>8 8gt
map <leader>9 9gt
map <leader>0 :tablast<CR>

"" tabline plugin settings 
"" {{{{{
hi TabLine      ctermfg=Black  ctermbg=Gray     cterm=NONE
hi TabLineFill  ctermfg=Black  ctermbg=Gray     cterm=NONE
hi TabLineSel   ctermfg=White  ctermbg=DarkBlue  cterm=NONE
"" }}}}}


highlight Pmenu ctermfg=black ctermbg=yellow
highlight PmenuSel ctermfg=red ctermbg=white gui=bold

"" {{{{{{{{{{
"" ----- You Complte Me -------
""
""

let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py' 
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_use_ultisnips_completer = 1
let g:ycm_enable_diagnostic_signs = 0
""
""
"" ----- You Complte Me -------
"" }}}}}}}}}}



"" {{{{{{{{{{
"" ----- You Complte Me -------
let g:jedi#popup_select_first = 0
let g:jedi#popup_on_dot = 1
"" ----- You Complte Me -------
"" }}}}}}}}}}

"" {{{{{{{{{{
"" ----- SnipMate -------
""
""
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
""
""
"" ----- SnipMate -------
"" }}}}}}}}}}



"" {{{{{{{{{{
"" ----- Vim-bookmarks -------
let g:bookmark_save_per_working_dir = 1
let g:bookmark_auto_save = 1
let g:bookmark_auto_close = 1	
highlight BookmarkLine ctermbg=194 ctermfg=NONE
"let g:bookmark_highlight_lines = 1
let g:bookmark_center = 1
"" ----- Vim-bookmarks -------
"" }}}}}}}}}}


"" {{{{{{{{{{
"" ----- Gundo Toggle -------
nnoremap <F6> :GundoToggle<CR>
"" ----- Gundo Toggle -------
"" }}}}}}}}}}


"" {{{{{{{{{{
"" ----- Tagbar  -------
nnoremap <leader>t :TagbarToggle<CR>
"" ----- Tagbar  -------
"" }}}}}}}}}}

"" -- Dummy Sign for SignColumn to be shown always 
"" {{{{{{{{{{{
autocmd BufEnter * sign define dummy 
autocmd BufEnter * execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')
"" }}}}}}}}}}

"" -- Nerdtree settings 
"" {{{{{{{{{{{
let g:nerdtree_tabs_focus_on_files = 1
let g:nerdtree_tabs_open_on_console_startup=1
"" }}}}}}}}}}


"" IndentGuides
"" {{{{{{{{{{{
let g:indent_guides_enable_on_vim_startup = 0
let g:indent_guides_auto_colors = 0
hi IndentGuidesOdd  ctermbg=black
hi IndentGuidesEven ctermbg=darkgrey
"" }}}}}}}}}}

au FileType ruby map <F5> <ESC>:w<CR>:!ruby %<CR>
au FileType python map <F5> <ESC>:w<CR>:!python %<CR>
au FileType cpp map <F4> <ESC>:w<CR>:!g++ -O2 -std=gnu++11 % && ./a.out 
au FileType cpp map <F5> <ESC>:w<CR>:!g++ -O2 -std=gnu++11 % && ./a.out < in <CR>
au FileType c map <F5> <ESC>:w<CR>:!gcc %<CR><CR>:!./a.out < input.txt<CR>
imap <F2> <ESC>:w<CR>
map <F3> <ESC>:!cat %\|pbcopy<CR>

"" -- Markdown Settings
let vim_markdown_preview_hotkey='<C-m>'

"Added by android-vim:
set tags+=~/.vim/tags
autocmd Filetype java setlocal omnifunc=javacomplete#Complete
let g:SuperTabDefaultCompletionType = 'context'

set laststatus=2
let g:airline_powerline_fonts = 1 

function! MyLineNumber()
    return substitute(line('.'), '\d\@<=\(\(\d\{3\}\)\+\)$', ',&', 'g'). ' | '.
                \    substitute(line('$'), '\d\@<=\(\(\d\{3\}\)\+\)$', ',&', 'g')
endfunction

call airline#parts#define('linenr', {'function': 'MyLineNumber', 'accents': 'bold'})

let g:airline_section_z = airline#section#create(['%3p%%: ', 'linenr', ':%3v'])
